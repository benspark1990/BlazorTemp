@page "/cart"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject ICartRepository _cartRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@if (IsProcessing)
{
	<div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
		<img src="/images/loading.gif" alt="loading" />
	</div>
}
else
{
	<div class="row w-100">
		<div class="col-lg-6 col-12">
			<div class="container p-4 m-2">
				<h4 class="text-center text-success display-6">
					Cart Summary
				</h4>

				@foreach (var cartItem in ShoppingCarts)
				{
					<div class="d-flex p-2 m-2">
						<div class="card flex-row w-100">
							<img class="card-img-left" src="@(cartItem.Product.ImageUrl ?? "/images/default.png")" style="width: 120px;">
						<div class="card-body">
							<div class="d-flex justify-content-between align-items-center">
								<h4 class="">
										@cartItem.Product.Name
								</h4>
								<h4>
										@cartItem.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
								</h4>
							</div>
							<div class="flex-fill">
								<h4 class="text-danger">
										@((cartItem.Product.Price * cartItem.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
								</h4>
							</div>
							<div class="d-flex justify-content-between align-items-center">
								<div class="d-flex justify-content-between g-0">
										<span @onclick="()=>UpdateCartItem(cartItem.ProductId,-1)">
										<i class="bi bi-dash-circle-fill btn text-secondary"></i>
									</span>
									<span class="ml-1 me-1">
										<b class="lead">@cartItem.Count</b>
									</span>
										<span @onclick="()=>UpdateCartItem(cartItem.ProductId,+1)">
										<i class="bi bi-plus-circle-fill btn text-secondary"></i>
									</span>
								</div>
								<button class="btn btn-danger">Remove</button>
							</div>
						</div>
					</div>
				</div>
				}
			</div>
		</div>
		<div class="col-lg-6 col-12 p-4">
			<div class="card">
				<div class="card-header text-success text-center display-6">
					Pickup Details
				</div>
				<div class="card-body">
					<EditForm EditContext="editContext" FormName="CartForm">
						<DataAnnotationsValidator />
						<ValidationSummary />
						<div class="form-group">
							<label>Name</label>
							<InputText @bind-Value="OrderHeader.Name" class="form-control" />
							<ValidationMessage For="()=>OrderHeader.Name"></ValidationMessage>
						</div>
						<div class="form-group">
							<label>Email</label>
							<InputText @bind-Value="OrderHeader.Email" class="form-control" />
							<ValidationMessage For="()=>OrderHeader.Email"></ValidationMessage>
						</div>
						<div class="form-group">
							<label>Phone</label>
							<InputText @bind-Value="OrderHeader.PhoneNumber" class="form-control" />
							<ValidationMessage For="()=>OrderHeader.PhoneNumber"></ValidationMessage>
						</div>
					</EditForm>
					<div class="card mt-4 bg-light">
						<div class="card-body">
							<h4>
								Grand Total: --$$--
							</h4>
							<h4>
								No. of Items: --COUNT--
							</h4>
						</div>

					</div>
				</div>

				<button class="btn btn-success m-4">
					Looks Good? Place Order!
				</button>
			</div>
		</div>
	</div>
}

@code {
	private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>();
	[SupplyParameterFromForm]
	private OrderHeader OrderHeader { get; set; } = new OrderHeader();

	private bool IsProcessing { get; set; } = true;
	private EditContext? editContext;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider
			.GetAuthenticationStateAsync();
		var user = authState.User;
		OrderHeader.Email= user.FindFirst(u => u.Type.Contains("email"))?.Value;
		editContext = new(OrderHeader);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			
			await LoadCart();
			IsProcessing = false;
			StateHasChanged();
		}
		//return base.OnAfterRenderAsync(firstRender);
	}

	private async Task LoadCart()
	{
		var authState = await AuthenticationStateProvider
			.GetAuthenticationStateAsync();
		var user = authState.User;
		ShoppingCarts = await _cartRepository.GetAllAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
	}

	private async Task UpdateCartItem(int productId, int updateBy)
    {
		var authState = await AuthenticationStateProvider
			.GetAuthenticationStateAsync();
		var user = authState.User;

		await _cartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value,productId,updateBy);
        await LoadCart();
    }
}
