@page "/"
@using System.Globalization

<PageTitle>Home</PageTitle>
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                <div class="d-flex align-items-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill"
                           @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterProductsByName"
                           placeholder="Search for Food Items!"
                           style="width: 100%; padding: 20px;">
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>

        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link" href="#" style="cursor: pointer" @onclick="() => FilterProducts(0)">All</span>
                </li>
                @foreach (var category in Categories)
                {
                    <li class="nav-item">
                        <span class="nav-link" href="#" style="cursor: pointer" @onclick="() => FilterProducts(category.Id)">@category.Name</span>
                    </li>
                }
            </ul>
            <div class="row mt-4 mx-1">

                @foreach (var product in FilteredProducts)
                {

                    <div class="col-12 col-md-6 col-lg-4 col-xl-3 pe-3 mb-5">
                        <div class="card">
                            <div class="mt-3 row m-1">
                                <div class="col-6 px-3">
                                    @if (!string.IsNullOrWhiteSpace(product.SpecialTag))
                                    {
                                        <i class="bi bi-star btn btn-outline-success disabled"><span class="small">@product.SpecialTag</span></i>
                                    }
                                </div>
                                <div class="col-6 text-end text-danger px-3 h3">
                                    @product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                </div>
                            </div>
                            <div class="text-center">
                                @if (string.IsNullOrWhiteSpace(product.ImageUrl))
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style="">
                                }
                                else
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@product.ImageUrl" style="">
                                }

                            </div>
                            <div class="card-body">
                                <h3 class="text-center text-success">@product.Name</h3>
                                <p class="card-text mt-2">@((MarkupString)@product.Description)</p>
                                <h4 class="text-center">
                                    <i class="bi bi-cart3 btn btn-success text-right px-5 form-control" > Add to cart</i>
                                </h4>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();
    private bool IsProcessing { get; set; } = true;
    private string _searchText = "";
    private int _selectedCategoryId = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
        Categories = await _categoryRepository.GetAllAsync();
        FilterProducts(0);
        // Load categories
    }

    private void FilterProducts(int categoryId)
    {
        if (categoryId == 0)
        {
            FilteredProducts = Products;
            _selectedCategoryId = categoryId;
        }
        //basically if none of the category Id matches the id we provide in parameter then return back
        if (Categories.All(c => c.Id != categoryId))
            return;

            FilteredProducts = Products.Where(p => p.CategoryId == categoryId).ToList();
            _selectedCategoryId = categoryId;
            _searchText = String.Empty;
    }


    private void FilterProductsByName(string newValueOfSearchText)
    {
        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
                .Where(p => p.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        _searchText = newValueOfSearchText;

    }
}